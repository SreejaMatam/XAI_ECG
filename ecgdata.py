###################### Data Preparation
import os
import re
import numpy as np
import pandas as pd
from scipy import signal
from scipy.io import loadmat
import pydicom
from pydicom import dcmread
from pydicom.waveforms import multiplex_array
import h5py
import wfdb
import ast

def umg(input_dir):
  pid = []
  ds = []
  for file in os.listdir(input_dir): 
      if re.match('sema-', file):
          fpath2 = "./data/" + file
          data = dcmread(fpath2)
          ds.append(data)
          pid.append(data.PatientName)
  # preprocessing of UMG data
  zero_padding = np.zeros((96, 12))
  firstiteration = True
  for d in ds:
      # correct sampling frequency from 500Hz to 400Hz
      resampled = signal.resample_poly(d.waveform_array(0), 4, 5)/1000
      concat = np.concatenate([resampled, zero_padding], axis=0)
      if firstiteration:
        x = np.expand_dims(concat, axis=0)
        firstiteration = False
      else:
        x = np.concatenate([x, np.expand_dims(concat, axis=0)], axis = 0)
  return x, pid

# load Ribeiro test data - https://zenodo.org/record/3765780
def ribeiro(input_dir, idx):
  fpath1 = input_dir + "ecg_tracings.hdf5"
  with h5py.File(fpath1, "r") as f:\
      x = np.array(f['tracings'])
  return x[idx], idx


### load CPSC2018 data - https://storage.cloud.google.com/physionet-challenge-2020-12-lead-ecg-public/PhysioNetChallenge2020_Training_CPSC.tar.gz

# Load challenge data
def load_challenge_data(header_file):
    with open(header_file, 'r') as f:
        header = f.readlines()
    mat_file = header_file.replace('.hea', '.mat')
    x = loadmat(mat_file)
    recording = np.asarray(x['val'], dtype=np.float64)
    return recording, header

# Find unique classes
def get_classes(input_dir, filenames):
    classes = set()
    for filename in filenames:
        with open(filename, 'r') as f:
            for l in f:
                if l.startswith('#Dx'):
                    tmp = l.split(': ')[1].split(',')
                    for c in tmp:
                        classes.add(c.strip())
    return sorted(classes)

def get_headerfiles(input_dir):
  header_files = []
  for f in os.listdir(input_dir + 'Training_WFDB/'):
      g = os.path.join(input_dir + 'Training_WFDB/', f)
      if not f.lower().startswith('.') and f.lower().endswith('hea') and os.path.isfile(g):
          header_files.append(g)
  return header_files

def cpsc(input_dir, idx_x):
  header_files = get_headerfiles(input_dir)
  classes = get_classes(input_dir, header_files)
  num_classes = len(classes)
  num_files = len(header_files)
  headers = list()
  firstiteration = True
  for i in range(num_files):
    if(i in idx_x):
      recording, header = load_challenge_data(header_files[i]) # shape: 12,4096
      # correct input shape to sample,lead
      recording = np.swapaxes(recording,0,1)
      # correct sampling frequency from 500Hz to 400Hz
      resampled = signal.resample_poly(recording, 4, 5)/1000
      if(len(resampled) < 4096): 
        zero_padding = np.zeros((4096-len(resampled), 12))
        resampled = np.concatenate([resampled, zero_padding], axis=0)
      if firstiteration:
        x = np.expand_dims(resampled[0:4096], axis=0)
        firstiteration = False
      else:
        x = np.concatenate([x, np.expand_dims(resampled[0:4096], axis=0)], axis = 0)
      headers.append(header)
  pid = []
  for i in range(len(x)):
    pid.append(headers[i][0].split(' ')[0])
  return x, pid

### load PTB-XL data - https://physionet.org/content/ptb-xl/1.0.3/

# superclasses: 1AVB, CLBBB, CRBBB, AFIB, STACH, SBRAD
def ptbxl(input_dir, scp_code='NORM'):
  path = './data/ptb-xl-a-large-publicly-available-electrocardiography-dataset-1.0.3/'
  # load and convert annotation data
  Y = pd.read_csv(path+'ptbxl_database.csv', index_col='ecg_id')
  Y.scp_codes = Y.scp_codes.apply(lambda x: ast.literal_eval(x))
  Y = Y[Y.scp_codes.str.contains(pat=scp_code, na=False, regex=False)]
  data = [wfdb.rdsamp(path+f) for f in Y.filename_hr] #hr: 500Hz, lr: 200Hz
  X = np.array([np.concatenate([signal.resample_poly(sig, 4, 5), np.zeros((96, 12))], axis=0) for sig, meta in data])
  return X, Y.index.values


def load(input_dir, dataset, idx=None):
  if dataset=="umg":
    return umg(input_dir, idx)
  elif dataset=="ribeiro":
    return ribeiro(input_dir, idx)
  elif dataset=="cpsc":
    return cpsc(input_dir, idx)
  elif dataset=="ptbxl":
    return ptbxl(input_dir, idx)


def getCohortsCPSC(abnorm):
  pid_AF = np.array([3, 4, 7, 9, 17, 19, 23, 26, 61, 64, 65, 71, 86, 101, 109, 117, 121, 122, 126, 145, 150, 153, 184, 186, 198, 203, 205, 214, 217, 220, 222, 231, 235, 247, 257, 260, 267, 271, 272, 274, 276, 279, 290, 306, 316, 317, 331, 351, 358, 363, 370, 374, 375, 376, 383, 384, 390, 392, 405, 406, 412, 415, 421, 424, 435, 438, 442, 446, 456, 464, 468, 470, 471, 478, 483, 484, 491, 495, 498, 502, 504, 513, 514, 518, 519, 525, 530, 531, 537, 543, 545, 547, 549, 551, 564, 566, 584, 586, 595, 598, 601, 609, 613, 629, 635, 639, 643, 646, 656, 663, 664, 672, 684, 686, 689, 693, 695, 699, 700, 701, 706, 707, 710, 713, 719, 731, 737, 745, 747, 751, 763, 769, 773, 782, 788, 795, 799, 804, 833, 835, 836, 840, 848, 849, 850, 862, 887, 889, 890, 898, 907, 912, 923, 925, 927, 931, 932, 933, 941, 948, 963, 964, 979, 989, 993, 994, 995, 1002, 1007, 1008, 1010, 1016, 1017, 1019, 1022, 1025, 1027, 1030, 1044, 1053, 1054, 1066, 1070, 1072, 1076, 1085, 1093, 1094, 1098, 1124, 1136, 1142, 1149, 1154, 1155, 1156, 1158, 1159, 1163, 1164, 1165, 1180, 1181, 1182, 1183, 1184, 1199, 1201, 1215, 1216, 1219, 1224, 1232, 1233, 1238, 1249, 1252, 1255, 1260, 1287, 1291, 1292, 1297, 1299, 1315, 1317, 1323, 1324, 1329, 1366, 1371, 1372, 1374, 1377, 1388, 1389, 1391, 1397, 1409, 1411, 1418, 1423, 1424, 1427, 1432, 1440, 1449, 1458, 1462, 1468, 1472, 1482, 1485, 1504, 1514, 1524, 1526, 1528, 1538, 1562, 1575, 1578, 1583, 1585, 1589, 1598, 1601, 1603, 1604, 1605, 1606, 1607, 1608, 1612, 1620, 1624, 1626, 1635, 1648, 1653, 1656, 1661, 1665, 1684, 1694, 1712, 1713, 1718, 1720, 1725, 1729, 1732, 1753, 1757, 1761, 1762, 1764, 1765, 1777, 1781, 1789, 1792, 1795, 1797, 1803, 1817, 1842, 1852, 1856, 1867, 1875, 1882, 1887, 1889, 1895, 1902, 1917, 1927, 1931, 1932, 1933, 1941, 1948, 1950, 1953, 1957, 1958, 1965, 1968, 1973, 1977, 1978, 2009, 2016, 2019, 2027, 2028, 2031, 2064, 2066, 2081, 2084, 2093, 2100, 2105, 2109, 2111, 2113, 2118, 2148, 2150, 2157, 2158, 2159, 2169, 2176, 2180, 2193, 2211, 2221, 2223, 2230, 2237, 2241, 2249, 2256, 2278, 2284, 2289, 2297, 2300, 2310, 2324, 2332, 2336, 2339, 2344, 2348, 2357, 2373, 2375, 2378, 2385, 2389, 2406, 2407, 2409, 2429, 2438, 2446, 2455, 2459, 2463, 2472, 2479, 2482, 2511, 2515, 2517, 2522, 2527, 2529, 2534, 2535, 2539, 2548, 2551, 2563, 2565, 2573, 2590, 2594, 2595, 2610, 2611, 2612, 2613, 2618, 2627, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2647, 2659, 2672, 2682, 2691, 2692, 2696, 2697, 2703, 2704, 2706, 2712, 2714, 2715, 2716, 2718, 2725, 2733, 2756, 2757, 2759, 2763, 2764, 2775, 2783, 2791, 2794, 2821, 2833, 2839, 2845, 2848, 2849, 2850, 2852, 2857, 2863, 2876, 2880, 2882, 2885, 2887, 2899, 2902, 2903, 2929, 2933, 2936, 2939, 2947, 2952, 2960, 2962, 2964, 2967, 2975, 2978, 2985, 2987, 2992, 3001, 3024, 3032, 3039, 3047, 3048, 3049, 3064, 3075, 3078, 3079, 3084, 3088, 3094, 3098, 3112, 3115, 3127, 3140, 3143, 3144, 3147, 3148, 3158, 3169, 3171, 3177, 3180, 3182, 3183, 3189, 3192, 3198, 3209, 3212, 3213, 3223, 3254, 3259, 3277, 3279, 3280, 3282, 3289, 3294, 3303, 3308, 3309, 3315, 3316, 3317, 3320, 3321, 3330, 3333, 3339, 3343, 3367, 3379, 3387, 3397, 3398, 3401, 3402, 3403, 3405, 3418, 3425, 3432, 3433, 3437, 3456, 3460, 3476, 3483, 3484, 3496, 3504, 3507, 3509, 3510, 3517, 3536, 3537, 3543, 3545, 3561, 3563, 3567, 3570, 3589, 3597, 3615, 3622, 3626, 3627, 3641, 3644, 3649, 3659, 3664, 3666, 3669, 3676, 3677, 3679, 3681, 3685, 3701, 3702, 3709, 3715, 3726, 3731, 3734, 3737, 3752, 3753, 3754, 3755, 3760, 3763, 3764, 3773, 3779, 3780, 3786, 3787, 3798, 3808, 3820, 3830, 3835, 3840, 3849, 3855, 3861, 3876, 3881, 3888, 3917, 3927, 3940, 3949, 3951, 3955, 3969, 3985, 3995, 4005, 4009, 4012, 4016, 4035, 4037, 4041, 4043, 4045, 4053, 4062, 4073, 4075, 4094, 4101, 4105, 4106, 4107, 4108, 4110, 4123, 4129, 4132, 4137, 4139, 4152, 4158, 4159, 4162, 4166, 4171, 4177, 4178, 4183, 4193, 4194, 4205, 4214, 4223, 4226, 4229, 4230, 4238, 4248, 4254, 4261, 4272, 4279, 4281, 4301, 4313, 4331, 4335, 4339, 4341, 4344, 4345, 4347, 4350, 4354, 4356, 4361, 4365, 4372, 4404, 4409, 4417, 4421, 4458, 4459, 4461, 4476, 4490, 4496, 4502, 4505, 4510, 4511, 4522, 4527, 4544, 4551, 4554, 4559, 4560, 4561, 4566, 4568, 4584, 4586, 4587, 4591, 4594, 4615, 4624, 4636, 4642, 4663, 4682, 4691, 4696, 4703, 4709, 4718, 4720, 4721, 4724, 4725, 4727, 4730, 4732, 4762, 4765, 4777, 4779, 4788, 4796, 4805, 4814, 4816, 4817, 4821, 4824, 4829, 4834, 4836, 4838, 4839, 4855, 4860, 4874, 4889, 4892, 4905, 4915, 4919, 4928, 4932, 4933, 4950, 4972, 4974, 4980, 4981, 4990, 4997, 4998, 5000, 5010, 5020, 5023, 5029, 5041, 5049, 5054, 5073, 5078, 5083, 5084, 5089, 5093, 5098, 5101, 5107, 5117, 5128, 5138, 5139, 5141, 5146, 5156, 5159, 5166, 5170, 5171, 5181, 5187, 5190, 5195, 5208, 5220, 5225, 5240, 5252, 5261, 5267, 5273, 5275, 5284, 5300, 5308, 5320, 5325, 5339, 5343, 5353, 5356, 5362, 5376, 5377, 5380, 5382, 5384, 5388, 5396, 5397, 5398, 5400, 5401, 5404, 5406, 5416, 5418, 5421, 5433, 5436, 5438, 5442, 5443, 5445, 5454, 5467, 5469, 5496, 5502, 5508, 5511, 5521, 5526, 5529, 5531, 5533, 5534, 5545, 5557, 5559, 5561, 5571, 5584, 5587, 5589, 5592, 5595, 5607, 5613, 5622, 5624, 5626, 5627, 5629, 5630, 5634, 5637, 5645, 5649, 5651, 5652, 5655, 5658, 5666, 5668, 5674, 5676, 5677, 5679, 5685, 5701, 5703, 5717, 5718, 5724, 5725, 5730, 5745, 5746, 5754, 5757, 5760, 5764, 5772, 5775, 5780, 5783, 5784, 5787, 5790, 5791, 5795, 5805, 5815, 5820, 5823, 5829, 5834, 5837, 5842, 5846, 5848, 5854, 5857, 5867, 5872, 5874, 5878, 5884, 5893, 5895, 5897, 5909, 5912, 5914, 5915, 5929, 5958, 5960, 5964, 5969, 5971, 5989, 5995, 6000, 6013, 6022, 6037, 6039, 6043, 6044, 6047, 6059, 6060, 6061, 6068, 6080, 6092, 6097, 6123, 6126, 6127, 6131, 6135, 6146, 6149, 6152, 6164, 6165, 6170, 6172, 6174, 6177, 6186, 6194, 6210, 6215, 6219, 6222, 6223, 6225, 6226, 6227, 6236, 6245, 6250, 6257, 6266, 6277, 6282, 6288, 6290, 6294, 6295, 6300, 6302, 6317, 6326, 6334, 6335, 3107, 6352, 6368, 6369, 6381, 6384, 6387, 6393, 6397, 6398, 6416, 6417, 6422, 6428, 6429, 6435, 6444, 6450, 6456, 6486, 6487, 6488, 6496, 6503, 6508, 6517, 6520, 6539, 6546, 6551, 6552, 6567, 6571, 6578, 6584, 6588, 6592, 6597, 6598, 6602, 6605, 6609, 6611, 6614, 6629, 6665, 6671, 6675, 6676, 6685, 6688, 6694, 6695, 6696, 6698, 6706, 6710, 6713, 6721, 6724, 6728, 6736, 6738, 6741, 6743, 6746, 6755, 6764, 6777, 6781, 6788, 6790, 6798, 6803, 6815, 6831, 6835, 6837, 6838, 6850, 6851, 6861, 6862, 6863, 6867, 6869, 6876])
  idx_AF = [x - 1 for x in pid_AF]
  pid_AF2 = np.array([43, 79, 112, 213, 503, 557, 563, 607, 667, 796, 857, 883, 884, 1029, 1041, 1061, 1108, 1193, 1228, 1306, 1344, 1378, 1410, 1532, 1576, 1592, 1621, 1654, 1678, 1740, 1774, 1780, 1841, 1859, 1870, 1890, 2011, 2080, 2106, 2114, 2161, 2232, 2282, 2330, 2392, 2430, 2436, 2503, 2520, 2581, 2602, 2607, 2653, 2654, 2898, 3126, 3167, 3205, 3224, 3264, 3371, 3391, 3678, 3837, 3979, 4028, 4039, 4112, 4245, 4306, 4359, 4565, 4616, 4652, 4710, 4713, 4753, 4756, 4960, 4991, 4992, 4993, 5037, 5042, 5085, 5113, 5115, 5135, 5188, 5193, 5211, 5263, 5412, 5576, 5578, 5770, 5782, 5794, 5799, 5807, 5967, 5968, 5978, 6038, 6048, 6075, 6087, 6116, 6138, 6180, 6211, 6220, 6296, 6320, 6327, 6360, 6382, 6396, 5952, 6469, 6527, 6807, 6872])
  idx_AF2 = [x - 1 for x in pid_AF2]
  pid_Sinus = np.array([2, 16, 20, 29, 30, 37, 38, 41, 59, 73, 75, 89, 90, 94, 107, 125, 133, 141, 143, 149, 157, 164, 166, 170, 173, 175, 176, 177, 179, 189, 190, 192, 193, 206, 208, 210, 221, 229, 233, 254, 264, 281, 283, 285, 287, 305, 312, 315, 327, 330, 332, 335, 344, 348, 357, 365, 371, 387, 395, 419, 426, 429, 448, 453, 476, 480, 481, 482, 497, 505, 512, 520, 526, 527, 528, 534, 550, 565, 567, 569, 576, 579, 588, 597, 614, 617, 632, 634, 636, 640, 644, 648, 653, 665, 674, 683, 690, 711, 716, 721, 727, 736, 743, 753, 772, 774, 785, 800, 803, 805, 823, 824, 827, 838, 841, 843, 858, 864, 891, 892, 904, 911, 918, 929, 945, 951, 952, 955, 968, 973, 983, 985, 987, 991, 998, 1009, 1012, 1015, 1024, 1035, 1042, 1056, 1077, 1082, 1087, 1096, 1097, 1106, 1115, 1121, 1122, 1126, 1129, 1137, 1141, 1144, 1150, 1151, 1166, 1168, 1175, 1176, 1189, 1208, 1220, 1229, 1234, 1241, 1246, 1251, 1257, 1272, 1301, 1327, 1337, 1339, 1349, 1353, 1376, 1381, 1383, 1401, 1419, 1421, 1437, 1447, 1456, 1459, 1463, 1470, 1480, 1484, 1489, 1501, 1507, 1508, 1515, 1531, 1534, 1536, 1542, 1555, 1557, 1558, 1561, 1567, 1582, 1599, 1610, 1613, 1616, 1627, 1629, 1630, 1642, 1649, 1655, 1667, 1668, 1672, 1674, 1685, 1692, 1695, 1698, 1699, 1700, 1702, 1714, 1722, 1736, 1766, 1776, 1778, 1806, 1808, 1831, 1857, 1862, 1864, 1869, 1876, 1880, 1891, 1892, 1893, 1914, 1921, 1924, 1928, 1938, 1943, 1949, 1961, 1964, 1971, 1979, 1983, 1993, 2012, 2014, 2022, 2040, 2043, 2046, 2052, 2057, 2060, 2070, 2086, 2089, 2110, 2112, 2125, 2126, 2127, 2131, 2142, 2151, 2154, 2165, 2168, 2170, 2197, 2204, 2205, 2206, 2219, 2225, 2233, 2242, 2246, 2253, 2257, 2261, 2262, 2264, 2273, 2275, 2285, 2301, 2306, 2317, 2337, 2347, 2350, 2370, 2371, 2377, 2380, 2383, 2397, 2398, 2401, 2402, 2403, 2419, 2426, 2428, 2433, 2441, 2442, 2454, 2462, 2469, 2473, 2475, 2484, 2493, 2495, 2496, 2498, 2501, 2505, 2507, 2518, 2538, 2543, 2544, 2547, 2549, 2550, 2569, 2570, 2571, 2582, 2583, 2588, 2591, 2600, 2609, 2626, 2660, 2661, 2667, 2675, 2685, 2687, 2700, 2702, 2722, 2730, 2751, 2770, 2773, 2785, 2792, 2796, 2805, 2817, 2820, 2824, 2841, 2842, 2860, 2868, 2891, 2895, 2909, 2911, 2919, 2921, 2923, 2925, 2944, 2945, 2956, 2971, 2976, 2981, 2982, 2986, 2988, 2990, 3023, 3038, 3044, 3068, 3080, 3081, 3085, 3086, 3100, 3128, 3129, 3134, 3137, 3153, 3155, 3157, 3175, 3179, 3186, 3211, 3215, 3217, 3218, 3220, 3221, 3228, 3238, 3239, 3241, 3246, 3250, 3255, 3256, 3261, 3263, 3265, 3269, 3272, 3304, 3307, 3311, 3327, 3350, 3351, 3354, 3358, 3363, 3377, 3392, 3394, 3399, 3410, 3413, 3422, 3423, 3424, 3430, 3431, 3435, 3442, 3454, 3465, 3470, 3485, 3498, 3500, 3501, 3503, 3505, 3513, 3529, 3548, 3557, 3569, 3579, 3582, 3586, 3588, 3590, 3600, 3601, 3603, 3608, 3613, 3619, 3625, 3629, 3633, 3643, 3648, 3650, 3651, 3653, 3655, 3657, 3663, 3671, 3680, 3689, 3690, 3713, 3717, 3723, 3732, 3733, 3735, 3739, 3745, 3747, 3751, 3766, 3769, 3776, 3788, 3790, 3791, 3795, 3800, 3806, 3814, 3816, 3818, 3828, 3829, 3832, 3858, 3867, 3869, 3873, 3879, 3886, 3893, 3894, 3898, 3903, 3912, 3920, 3922, 3924, 3925, 3930, 3932, 3947, 3971, 3973, 3975, 3981, 3984, 3987, 3989, 3992, 4007, 4011, 4015, 4019, 4022, 4024, 4032, 4036, 4065, 4066, 4071, 4088, 4093, 4098, 4099, 4102, 4113, 4115, 4146, 4147, 4154, 4160, 4167, 4174, 4175, 4176, 4207, 4208, 4209, 4213, 4219, 4228, 4234, 4235, 4237, 4251, 4257, 4262, 4263, 4275, 4284, 4286, 4291, 4299, 4310, 4317, 4327, 4351, 4364, 4366, 4370, 4371, 4374, 4378, 4381, 4387, 4396, 4398, 4399, 4401, 4418, 4422, 4429, 4437, 4448, 4451, 4456, 4468, 4474, 4486, 4503, 4504, 4512, 4526, 4532, 4543, 4548, 4550, 4563, 4570, 4571, 4576, 4596, 4597, 4618, 4631, 4644, 4649, 4656, 4660, 4662, 4668, 4678, 4686, 4687, 4702, 4714, 4719, 4737, 4743, 4744, 4751, 4754, 4772, 4781, 4785, 4790, 4791, 4794, 4806, 4808, 4811, 4827, 4828, 4832, 4853, 4862, 4867, 4881, 4882, 4883, 4888, 4895, 4910, 4920, 4931, 4940, 4944, 4946, 4947, 4952, 4961, 4963, 4967, 4968, 4973, 4976, 4984, 4994, 5004, 5013, 5046, 5072, 5077, 5094, 5108, 5114, 5125, 5131, 5133, 5137, 5148, 5149, 5155, 5163, 5168, 5175, 5180, 5183, 5194, 5201, 5207, 5223, 5229, 5237, 5239, 5241, 5244, 5248, 5253, 5266, 5268, 5286, 5294, 5297, 5322, 5373, 5386, 5387, 5389, 5405, 5422, 5427, 5428, 5429, 5437, 5449, 5452, 5465, 5470, 5477, 5481, 5482, 5486, 5493, 5498, 5499, 5509, 5516, 5566, 5572, 5579, 5586, 5594, 5600, 5602, 5603, 5616, 5620, 5635, 5636, 5644, 5667, 5675, 5687, 5693, 5694, 5697, 5704, 5712, 5713, 5714, 5716, 5727, 5732, 5735, 5737, 5741, 5763, 5765, 5779, 5785, 5802, 5809, 5827, 5838, 5859, 5861, 5866, 5883, 5891, 5905, 5906, 5913, 5916, 5933, 5934, 5937, 5940, 5941, 5944, 5950, 5955, 5959, 5970, 5976, 5984, 5986, 5991, 5992, 6012, 6016, 6020, 6021, 6026, 6030, 6042, 6046, 6064, 6066, 6070, 6093, 6098, 6114, 6118, 6130, 6136, 6154, 6162, 6188, 6195, 6196, 6231, 6249, 6252, 6253, 6258, 6269, 6274, 6284, 6286, 6298, 6304, 6306, 6307, 6309, 6314, 6318, 6323, 6330, 6331, 6347, 6351, 6358, 6363, 6371, 6380, 6390, 6415, 6434, 6437, 6439, 6447, 6464, 6466, 6467, 6476, 6478, 6485, 6491, 6501, 6504, 6506, 6507, 6521, 6528, 6535, 6536, 6541, 6542, 6549, 6557, 6559, 6560, 6565, 6568, 6569, 6573, 6580, 6585, 6590, 6604, 6606, 6612, 6617, 6621, 6623, 6624, 6643, 6678, 6681, 6697, 6699, 6702, 6709, 6712, 6716, 6734, 6735, 6772, 6780, 6782, 6789, 6801, 6806, 6809, 6821, 6824, 6832, 6845, 6846, 6853, 6870])
  idx_Sinus = [x - 1 for x in pid_Sinus]
  pid_LBBB = np.array([11, 18, 44, 57, 74, 81, 82, 131, 244, 253, 291, 367, 398, 401, 447, 506, 541, 548, 556, 607, 630, 734, 760, 765, 807, 857, 902, 977, 1041, 1065, 1084, 1186, 1195, 1213, 1235, 1254, 1273, 1275, 1300, 1310, 1342, 1351, 1378, 1441, 1466, 1483, 1496, 1509, 1573, 1622, 1737, 1754, 1768, 1872, 1874, 1903, 2065, 2087, 2102, 2231, 2251, 2265, 2279, 2315, 2330, 2396, 2461, 2478, 2513, 2536, 2553, 2577, 2629, 2710, 2737, 2851, 2867, 2908, 2974, 2980, 2983, 2984, 3016, 3051, 3082, 3119, 3136, 3145, 3197, 3202, 3291, 3299, 3323, 3331, 3335, 3349, 3371, 3378, 3404, 3538, 3555, 3556, 3572, 3577, 3621, 3623, 3636, 3672, 3673, 3692, 3770, 3842, 3848, 3852, 3864, 3902, 4039, 4116, 4122, 4386, 4394, 4408, 4432, 4447, 4500, 4604, 4634, 4666, 4736, 4741, 4763, 4809, 4851, 4926, 4929, 4964, 4971, 4979, 4983, 5002, 5012, 5037, 5085, 5188, 5193, 5242, 5263, 5307, 5342, 5367, 5393, 5411, 5448, 5466, 5487, 5523, 5537, 5556, 5564, 5593, 5606, 5619, 5621, 5660, 5665, 5690, 5702, 5710, 5773, 5774, 5786, 5801, 5808, 5849, 5907, 5917, 5924, 5928, 5938, 5957, 5973, 6010, 6018, 6081, 6106, 6121, 6166, 6220, 6234, 6262, 6279, 6316, 6340, 6373, 6423, 6446, 6473, 6475, 6481, 6648, 6674, 6690, 6807, 6810, 6813, 6856, 6875])
  idx_LBBB = [x - 1 for x in pid_LBBB]
  if abnorm==2:
    return idx_LBBB, idx_Sinus
  elif abnorm==4:
    return np.concatenate([idx_AF, idx_AF2], axis=0), idx_Sinus

def getCohortsPTB(scp_code):
    path = './data/ptb-xl-a-large-publicly-available-electrocardiography-dataset-1.0.3/'
    # load and convert annotation data
    Y = pd.read_csv(path+'ptbxl_database.csv', index_col='ecg_id')
    idx_abnorm = Y[Y.scp_codes.str.contains(pat=scp_code, na=False, regex=False)].index
    idx_normal = Y[Y.scp_codes.str.contains(pat="NORM", na=False, regex=False)].index
    return idx_abnorm, idx_normal



